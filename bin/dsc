#!/usr/bin/env ruby

# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'gli'

require 'deepsecurity'
require 'dsc'

include GLI::App

# config_file '.dsc.rc'

program_desc 'DeepSecurity command line client'

version Dsc::VERSION

desc 'Enable client debug output. One of debug, info, warn, error or fatal'
arg_name 'debug'
flag [:d, :debug]

desc 'Deep Security Manager'
arg_name 'hostname'
flag [:m, :manager]

desc 'Webservice Port'
arg_name 'port'
default_value '4119'
flag [:port]

desc 'Tennat'
arg_name 'tenat'
default_value ''
flag [:t, :tenant]

desc 'Username'
arg_name 'username'
default_value 'MasterAdmin'
flag [:u, :username]

desc 'Password'
arg_name 'password'
flag [:p, :password]

desc 'Output file'
default_value '--'
flag [:o, :outfile]

desc 'Show progress'
default_value false
switch [:P]

desc 'host detail'
# arg_name 'Describe arguments to host_status here'
command :host_detail do |c|

  c.desc "list"
  c.command :list do |list|

    list.desc 'fields'
    list.default_value Dsc::HostDetailCommand.default_fields_string
    list.flag [:fields]

    list.action do |global_options, options, args|
      Dsc::HostDetailCommand.new(global_options).list(options, args)
    end
  end

  c.desc "schema"
  c.command :schema do |schema|
    schema.action do |global_options, options, args|
      Dsc::HostDetailCommand.new(global_options).print_schema(options, args)
    end
  end

end

desc 'anti malware events'
# arg_name 'Describe arguments to host_status here'
command [:anti_malware_events, :anti_malware_event] do |c|

  c.desc "list"
  c.command :list do |list|

    list.desc 'fields'
    list.default_value Dsc::AntiMalwareEventCommand.default_fields_string
    list.flag [:fields]

    list.desc 'time filter'
    list.long_desc "One of #{Dsc::AntiMalwareEventCommand.valid_time_filters_string}"
    list.default_value "last_day"
    list.flag [:time_filter]

    list.action do |global_options, options, args|
      Dsc::AntiMalwareEventCommand.new(global_options).list(options, args)
    end
  end

  c.desc "schema"
  c.command :schema do |schema|
    schema.action do |global_options, options, args|
      Dsc::AntiMalwareEventCommand.new(global_options).print_schema(options, args)
    end
  end

end

desc 'API Version'
command :api_version do |c|
  c.action do |global_options, options, args|
    Dsc::Command.new(global_options).print_api_version(options, args)
  end
end

desc 'Manager time'
command :manager_time do |c|

  c.action do |global_options, options, args|
    Dsc::Command.new(global_options).print_manager_time(options, args)
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
