require "progressbar"
require "csv"

module Dsc

  class AntiMalwareEvent < DscObject


    def self.transport_class
      DeepSecurity::AntiMalwareEvent
    end

    def self.default_fields
      [
          # DNS name of system
          :"host.name",


          # fully qualified system node
          :"host.display_name",

          # signature / pattern version used in detection
          # MISSING

          # datetime the event was generated and/or received OS version
          :log_date,
          :start_time,
          :end_time,

          # system domain or system group
          # MISSING

          # account logged on during detection
          # MISSING

          # action taken
          :scan_action1,
          :scan_action2,
          :summary_scan_result,

          # result of action taken
          :scan_result_action1,
          :scan_result_action2,
          # :spyware_items,
          :"spyware_items.to_json",

          # name of malware/detection
          :malware_name,
          :malware_type,

          # source/path/filename/object of detection
          :infected_file_path,
          :infection_source

      ]
    end

    def self.list(hostname, port, tenat, username, password, host_filter, time_filter, fields, output, progress_bar, debug)
      Dsc.dsm_connect(hostname, port, tenat, username, password, debug) do |dsm|

        progressBar = ProgressBar.new("anti_malware_event", 100) if progress_bar

        DeepSecurity::Host.all # Make sure that hosts are cached
        progressBar.set(10) if progress_bar

        hostFilter = DeepSecurity::HostFilter.all_hosts
        timeFilter = DeepSecurity::TimeFilter.last_hour
        eventIdFilter = DeepSecurity::IDFilter.greater_than(0)


        anti_malware_events = DeepSecurity::AntiMalwareEvent.find_all(timeFilter, hostFilter, eventIdFilter)
        progressBar.set(25) if progress_bar
        csv = CSV.new(output)
        csv << fields
        anti_malware_events.each do |anti_malware_event|
          progressBar.inc(75/anti_malware_events.size) if progress_bar

          csv << fields.map { |attribute| anti_malware_event.instance_eval(attribute) }
        end
        progressBar.finish if progress_bar
      end

    end

  end

end