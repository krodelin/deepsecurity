module Dsc

  class AntiMalwareEventCommand < Command


    def self.transport_class
      DeepSecurity::AntiMalwareEvent
    end

    def self.default_fields
      [
          # DNS name of system
          :"host.name",


          # fully qualified system node
          :"host.display_name",

          # signature / pattern version used in detection
          # MISSING

          # datetime the event was generated and/or received OS version
          :log_date,
          :start_time,
          :end_time,

          # system domain or system group
          # MISSING

          # account logged on during detection
          # MISSING

          # action taken
          :scan_action1,
          :scan_action2,
          :summary_scan_result,

          # result of action taken
          :scan_result_action1,
          :scan_result_action2,
          # :spyware_items,
          # :"spyware_items.to_json",

          # name of malware/detection
          :malware_name,
          :malware_type,

          # source/path/filename/object of detection
          :infected_file_path,
          :infection_source

      ]
    end

    def list(options, args)
      fields = parse_fields(options[:fields])
      time_filter = parse_time_filter(options[:time_filter])
      output do |output|
        authenticate do |dsm|
          progressBar = ProgressBar.new("anti_malware_event", 100) if @show_progress_bar
          DeepSecurity::Host.all # Make sure that hosts are cached
          progressBar.set(10) if @show_progress_bar
          hostFilter = DeepSecurity::HostFilter.all_hosts
          eventIdFilter = DeepSecurity::IDFilter.greater_than(0)
          anti_malware_events = DeepSecurity::AntiMalwareEvent.find_all(time_filter, hostFilter, eventIdFilter)
          progressBar.set(25) if @show_progress_bar
          csv = CSV.new(output)
          csv << fields
          anti_malware_events.each do |anti_malware_event|
            progressBar.inc(75/anti_malware_events.size) if @show_progress_bar
            csv << fields.map { |attribute| anti_malware_event.instance_eval(attribute) }
          end
          progressBar.finish if @show_progress_bar
        end
      end
    end

    def self.define_list_command(c)
      super(c) do |list|
        define_time_filter_argument(list)
      end
    end

  end

end