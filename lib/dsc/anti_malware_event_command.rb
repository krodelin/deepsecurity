# @author Udo Schneider <Udo.Schneider@homeaddress.de>

module Dsc

  # This class defines the arguments, options and implementation for the `anti_malware_event` command/subcommand.
  class AntiMalwareEventCommand < Command

    # DeepSecurity object covered by this class.
    # @return [DeepSecurity::AntiMalwareEvent]
    def self.transport_class
      DeepSecurity::AntiMalwareEvent
    end

    # @!group Fields flag

    # Default fields if no argument is given
    # @return [Array<String>] Default fields if no argument is given
    def self.default_fields
      [
          # DNS name of system
          :"host.name",


          # fully qualified system node
          :"host.display_name",

          # signature / pattern version used in detection
          # MISSING

          # datetime the event was generated and/or received OS version
          :log_date,
          :start_time,
          :end_time,

          # system domain or system group
          # MISSING

          # account logged on during detection
          # MISSING

          # action taken
          :scan_action1,
          :scan_action2,
          :summary_scan_result,

          # result of action taken
          :scan_result_action1,
          :scan_result_action2,
          # :spyware_items,
          # :"spyware_items.to_json",

          # name of malware/detection
          :malware_name,
          :malware_type,

          # source/path/filename/object of detection
          :infected_file_path,
          :infection_source

      ]
    end

    # @!endgroup

    # @!group Command definitions

    # Define all commands for this available for this (sub) command_context
    # @param command_context [CLI::App] The current context of the command.
    # @return [void]
    def self.define_commands(command_context)
      command_context.desc "Access #{transport_class_string}s"
      command_context.command command_symbol do |anti_malware_event_command|
        define_list_command(anti_malware_event_command)
        define_schema_command(anti_malware_event_command)
      end
    end

    # Define `list` command_context
    # @param command_context [CLI::App] The current context of the command.
    # @yieldparam list_command [GLI::Command] The just defined list command_context
    # @yield [list_command] Gives the list command_context to the block
    # @return [void]
    def self.define_list_command(command_context)
      super(command_context) do |list|
        define_time_filter_flag(list)
      end
    end

    # @!endgroup

    # @!group Command Implementations

    # `list` Implementation.
    # List all entries of the `transport_class` type according to given filter parameters.
    # @param options [Hash<Symbol => Object>] Merged global/local options from GLI
    # @option options [String] :fields The fields to display.
    # @option options [String] :time_filter Timeframe to request.
    # @param args [Array<String>] Arguments from GLI
    # @return [void]
    def list_command(options, args)
      fields = parse_fields(options[:fields])
      time_filter = parse_time_filter(options[:time_filter])
      output do |output|
        authenticate do |manager|
          progressBar = ProgressBar.new("anti_malware_event", 100) if @show_progress_bar
          manager.hosts() # Make sure that hosts are cached
          progressBar.set(10) if @show_progress_bar
          hostFilter = DeepSecurity::HostFilter.all_hosts
          eventIdFilter = DeepSecurity::IDFilter.greater_than(0)
          anti_malware_events = manager.anti_malware_events_by_time_host_event(time_filter, hostFilter, eventIdFilter)
          progressBar.set(25) if @show_progress_bar
          csv = CSV.new(output)
          csv << fields
          anti_malware_events.each do |anti_malware_event|
            progressBar.inc(75/anti_malware_events.size) if @show_progress_bar
            csv << fields.map do |attribute|
              begin
                anti_malware_event.instance_eval(attribute)
              rescue => e
                "ERROR (#{e.message}"
              end
            end
          end
          progressBar.finish if @show_progress_bar
        end
      end
    end

    # @!endgroup

  end

end