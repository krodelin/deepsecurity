# @author Udo Schneider <Udo.Schneider@homeaddress.de>

module DeepSecurity

  # Represents an Anti-Malware event
  class AntiMalwareEvent < TransportObject

    attr_integer_accessor :anti_malware_config_id,
                          'The ID of the Anti-Malware configuration this event corresponds to'
    attr_integer_accessor :anti_malware_event_id,
                          'The ID of the event'
    attr_datetime_accessor :end_time,
                           'Endtime of this event if it was repeated multiple times (not currently used)'
    attr_integer_accessor :error_code,
                          'The VSAPI error code indicates the reason of the actions of failure'
    attr_integer_accessor :host_id,
                          'The host ID this event corresponds to'
    attr_string_accessor :infected_file_path,
                         'The infected file full path'
    attr_string_accessor :infection_source,
                         'The source computer of the infection'
    attr_datetime_accessor :log_date,
                           'The time this event occured'
    attr_string_accessor :malware_name,
                         'The name of the malware'
    attr_enum_accessor :malware_type,
                       EnumMalwareType,
                       'The type of the malware'
    attr_integer_accessor :protocol,
                          'The protocols: Local Files(0), Network shared folder(1), etc. However currently the Agent only support local files'
    attr_integer_accessor :quarantine_record_id,
                          'The ID of the quarantined file, if a file was quarantined as a result of this event.'
    attr_integer_accessor :scan_result_action1,
                          'The first action performed'
    attr_integer_accessor :scan_result_action2,
                          'The second action performed'
    attr_enum_accessor :scan_type,
                       EnumAntiMalwareScanType,
                       'Type of scan this event was captured under'
    array_object_accessor :spyware_items,
                          AntiMalwareSpywareItem,
                          'An array of spyware items associated with this event'
    attr_datetime_accessor :start_time,
                           'Starttime of this event if it was repeated multiple times (not currently used)'
    attr_string_accessor :tags,
                         'Any tags associated with this event'
    attr_integer_accessor :scan_action1
    attr_integer_accessor :scan_action2
    attr_string_accessor :summary_scan_result

    # cache_by_aspect :id, :name


  end

  class Manager

    # Retrieves the AntiMalware events specified by the time and host filter.
    # public AntiMalwareEventListTransport antiMalwareEventRetrieve(
    #   TimeFilterTransport timeFilter,
    #   HostFilterTransport hostFilter,
    #   IDFilterTransport eventIdFilter,
    #   String sID)
    def anti_malware_events(timeFilter, hostFilter, eventIdFilter)
      events = send_authenticated_request("anti_malware_event_retrieve", {
          :timeFilter => timeFilter.to_savon_data,
          :hostFilter => hostFilter.to_savon_data,
          :eventIdFilter => eventIdFilter.to_savon_data})[:anti_malware_events]
      return [] if events.nil?
      events[:item].map do |each|
        AntiMalwareEvent.from_savon_data(self, each)
      end
    end

  end

end
