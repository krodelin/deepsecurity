require "hpricot"
require "open-uri"

module DeepSecurity

  class Vulnerability

    attr_accessor :dpi_rule_identifier
    attr_accessor :cve_identifiers
    attr_accessor :secunia_identifiers
    attr_accessor :bugtraq_identifiers
    attr_accessor :microsoft_identifiers

    def parse_vulnerabilities_string(string)
      return [] if string.strip == "N/A"
      string.split(",").map { |each| each.strip }
    end

    def cve_identifiers_string=(string)
      @cve_identifiers = parse_vulnerabilities_string(string)
    end

    def secunia_identifiers_string=(string)
      @secunia_identifiers = parse_vulnerabilities_string(string)
    end

    def bugtraq_identifiers_string=(string)
      @bugtraq_identifiers = parse_vulnerabilities_string(string)
    end

    def microsoft_identifiers_string=(string)
      @microsoft_identifiers = parse_vulnerabilities_string(string)
    end

  end

  class Manager

    def vulnerabilities2

      rules_per_page = nil
      rules = []
      while rules.empty? || (rules.count%rules_per_page == 0)

        mainTableViewState = ["",
                              "controlCheck,after=[NONE]",
                              "icon,after=controlCheck",
                              "summaryConnectionType,after=icon",
                              "fullName,after=summaryConnectionType",
                              "summaryPriority,after=fullName",
                              "summarySeverityHTML,after=summaryPriority",
                              "summaryMode,after=summarySeverityHTML",
                              "summaryType,after=summaryMode",
                              "summaryCVE,after=summaryType",
                              "summarySECUNIA,after=summaryCVE",
                              "summaryBUGTRAQ,after=summarySECUNIA",
                              "summaryMS,after=summaryBUGTRAQ",
                              "summaryCvssScore,after=summaryMS",
                              "summaryIssued,after=summaryCvssScore"]

        path = "/PayloadFilter2s.screen?paging_offset=#{rules.count}&mainTable_viewstate=#{URI.escape(mainTableViewState.join('|'))}"
        body = send_authenticated_http_get(path)
        doc = Hpricot(body)

        column_mapping = Hash.new()
        doc.
            search("#mainTable_header_table td:not(.datatable_resizer)").
            map { |each| clean_html_string(each)[0..-2] }.
            each_with_index { |each, index| column_mapping[each]=index unless each.blank? }

        doc.search("#mainTable_rows_table tr") do |row|
          column_cells = row.
              search("td").
              map { |each| clean_html_string(each) }
          vulnerability = Vulnerability.new
          vulnerability.dpi_rule_identifier = column_cells[column_mapping["Name"]].split(' ').first
          vulnerability.cve_identifiers_string = column_cells[column_mapping["CVE"]]
          vulnerability.secunia_identifiers_string = column_cells[column_mapping["Secunia"]]
          vulnerability.bugtraq_identifiers_string = column_cells[column_mapping["Bugtraq"]]
          vulnerability.microsoft_identifiers_string = column_cells[column_mapping["Microsoft"]]
          rules.push(vulnerability)
        end
        rules_per_page = rules.count if rules_per_page.nil?
      end
      rules


    end

    def vulnerabilities
      payload_filters.map do |hash|
        vulnerability = Vulnerability.new
        vulnerability.dpi_rule_identifier = hash[:name].split(' ').first
        vulnerability.cve_identifiers_string = hash[:cve]
        vulnerability.secunia_identifiers_string = hash[:secunia]
        vulnerability.bugtraq_identifiers_string = hash[:bugtraq]
        vulnerability.microsoft_identifiers_string = hash[:microsoft]
        vulnerability
      end
    end

  end
end