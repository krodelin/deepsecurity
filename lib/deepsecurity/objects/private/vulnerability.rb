require "hpricot"
require "open-uri"

module DeepSecurity

  class Vulnerability

    attr_accessor :dpi_rule_identifier
    attr_accessor :cve_identifiers
    attr_accessor :secunia_identifiers
    attr_accessor :bugtraq_identifiers
    attr_accessor :microsoft_identifiers

    def parse_vulnerabilities_string(string)
      return [] if string.strip == "N/A"
      string.split(",").map { |each| each.strip }
    end

    def cve_identifiers_string=(string)
      @cve_identifiers = parse_vulnerabilities_string(string)
    end

    def secunia_identifiers_string=(string)
      @secunia_identifiers = parse_vulnerabilities_string(string)
    end

    def bugtraq_identifiers_string=(string)
      @bugtraq_identifiers = parse_vulnerabilities_string(string)
    end

    def microsoft_identifiers_string=(string)
      @microsoft_identifiers = parse_vulnerabilities_string(string)
    end

  end

  class Manager

    def vulnerabilities

      rules_per_page = nil
      rules = []
      while rules.empty? || (rules.count%rules_per_page == 0)

        mainTableViewState = ["",
                              "icon,after=[NONE]",
                              "summaryConnectionType,after=icon",
                              "fullName,width=546,after=summaryConnectionType",
                              "summaryPriority,after=fullName",
                              "summarySeverityHTML,after=summaryPriority",
                              "summaryMode,after=summarySeverityHTML",
                              "summaryType,after=summaryMode",
                              "summaryCVE,width=321,after=summaryType",
                              "summarySECUNIA,after=summaryCVE",
                              "summaryBUGTRAQ,after=summarySECUNIA",
                              "summaryMS,after=summaryBUGTRAQ",
                              "summaryCvssScore,after=summaryMS",
                              "summaryIssued,after=summaryCvssScore"]

        path = "/PayloadFilter2s.screen?paging_offset=#{rules.count}&mainTable_viewstate=#{URI.escape(mainTableViewState.join('|'))}"
        body = send_authenticated_http_get(path)
        doc = Hpricot(body)
        table = doc.search("#mainTable_rows_table")
        table.search("tr").each do |row|
          columns = row.search(".datatable_text")
          vulnerability = Vulnerability.new
          vulnerability.dpi_rule_identifier = columns[1].inner_html.split(' ').first
          vulnerability.cve_identifiers_string = columns[5].inner_html
          vulnerability.secunia_identifiers_string = columns[6].inner_html
          vulnerability.bugtraq_identifiers_string = columns[7].inner_html
          vulnerability.microsoft_identifiers_string = columns[8].inner_html
          rules.push(vulnerability)
        end
        rules_per_page = rules.count if rules_per_page.nil?
      end
      rules


    end

  end
end