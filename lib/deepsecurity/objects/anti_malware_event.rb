module DeepSecurity

  class AntiMalwareEvent < DSMObject

    # Represents an Anti-Malware event

    attr_integer_accessor :anti_malware_config_id, :anti_malware_event_id
    attr_datetime_accessor :end_time
    attr_integer_accessor :error_code, :host_id
    attr_string_accessor :infected_file_path, :infection_source
    attr_datetime_accessor :log_date
    attr_string_accessor :malware_name
    attr_enum_accessor EnumMalwareType, :malware_type
    attr_integer_accessor :protocol, :quarantine_record_id, :scan_result_action1, :scan_result_action2
    attr_enum_accessor EnumAntiMalwareScanType, :scan_type
    array_object_accessor AntiMalwareSpywareItem, :spyware_items
    attr_datetime_accessor :start_time
    attr_string_accessor :tags
    attr_integer_accessor :scan_action1, :scan_action2
    attr_string_accessor :summary_scan_result

    # cache_by_aspect :id, :name


  end

  class Manager

    # Retrieves the AntiMalware events specified by the time and host filter.
    # public AntiMalwareEventListTransport antiMalwareEventRetrieve(
    #   TimeFilterTransport timeFilter,
    #   HostFilterTransport hostFilter,
    #   IDFilterTransport eventIdFilter,
    #   String sID)
    def anti_malware_events(timeFilter, hostFilter, eventIdFilter)
      events = send_authenticated_request("anti_malware_event_retrieve", {
          :timeFilter => timeFilter.as_hash,
          :hostFilter => hostFilter.as_hash,
          :eventIdFilter => eventIdFilter.as_hash})[:anti_malware_events]
      return [] if events.nil?
      events[:item].map do |each|
        AntiMalwareEvent.from_hash(self, each)
      end
    end

  end

end
